# Создаем функцию, которая принимает два входных параметра - список и значение для поиска (будет возвращать индекс элемента).
def binary_search(list, item):
    # В переменных low и high хранятся границы той части списка, в которой выполняется поиск.
    low = 0
    high = len(list) - 1

    # Пока часть списка не сократится до одного элемента.
    while low <= high:
        # Проверяем средний элемент. mid - индекс среднего элемента, а guess - значение по этому индексу.
        # Окрушляется в меньшую сторону.
        mid = (low + high) // 2
        guess = list[mid]
        # Если значение найдено, то возвращаем текущее значение mid.
        if guess == item:
            return mid
        # Если средний элемент больше того, который мы ищем, то уменьшаем верхную границу поиска до mid-1.
        if guess > item:
            high = mid - 1
        # Иначе если средний элемент меньше того, который мы ищем, то увеличиваем нижнюю границу поиска до mid+1.
        else:
            low = mid + 1

    # Если значение не существует в списке, то возвращаем None (в какой-то момент условие low <= high нарушится).
    return None


my_list = [1, 3, 5, 7, 9]
print(binary_search(my_list, 3))
print(type(my_list))

# 'None' означает nil (ничто) в Python. Используем, чтобы определять, что значения нет в списке.
print(binary_search(my_list, -1))
