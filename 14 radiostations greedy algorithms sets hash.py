# Жадный алгоритм, используя множества и хеш-таблицу (словарь).
# Здесь нам нужно найти оптимальный набор радиостанций для покрытия всех штатов, используя жадный алгоритм.
# ----------
#


# Множество - это тип структуры данных, похожий на список, но который не может иметь дубликаты.
# Создаем множество "states_needed", который представляет из себя перечень штатов, которые необходимо покрыть.
# ----------
#
states_needed = {"mt", "wa", "or", "id", "nv", "ut", "са", "az"}


# Создаем словарь "stations", в котором ключи представляет из себя имена радиостанций,
# а значения представляют из себя штаты, которые покрываются этими радиостанциями.
# В этом словаре ключи являются множествами.
# ----------
#
stations = {"kone": {"id", "nv", "ut"},
            "ktwo": {"wa", "id", "mt"},
            "kthree": {"or", "nv", "са"},
            "kfour": {"nv", "ut"},
            "kfive": {"ca", "az"}}


# Создаем множество "final_stations", которое хранит итоговый набор радиостанций для покрытия всех штатов.
# Изначально этот словарь пуст.
# ----------
#
final_stations = set()


# Создаем цикл while, который формирует итоговый набор радиостанций для покрытия всех штатов.
# Этот цикл while работает, пока множество "states_needed" не является пустым,
# то есть пока у нас имеются непокрытые штаты.
# ----------
#
while states_needed:
    # Создаем переменную "best_station", которая хранит имя радиостанции,
    # обслуживающей больше всего штатов, которые еще не покрыты.
    # Изначально содержит "None".
    # ----------
    #
    best_station = None
    # Создаем переменную "states_covered", которая хранит множество штатов,
    # которые еще не покрыты и могут быть покрыты радиостанцией "best_station".
    # Изначально содержит пустое множество.
    # ----------
    #
    states_covered = set()
    # Создаем цикл for, в котором мы перебираем все ключи и значения в словаре "stations"
    # и находим радиостанцию "best_station".
    # ----------
    #
    for station, states_for_station in stations.items():
        # Создаем переменную "covered", которая содержит множество штатов,
        # которые еще не покрыты и которые могут быть покрыты текущей радиостанцией "station".
        # Мы находимо это путем пересечения двух множеств:
        # 1. "states_needed" - множество еще не покрытых штатов.
        # 2. "states_for_station" - множество штатов, которые может покрыть текущяя радиостанция "station".
        # ----------
        #
        covered = states_needed & states_for_station
        # Если множество "covered" больше, чем множество "states_covered", то
        # ----------
        #
        if len(covered) > len(states_covered):
            # текущая радиостанция "station" становится новой лучшей радиостанцией "best_station",
            # ----------
            #
            best_station = station
            # а также мы обновляем множество "states_covered".
            # ----------
            #
            states_covered = covered
    # После работы каждого цикла for мы уменьшаем перечень штатов, которые необходимо покрыть,
    # вычитая список штатов, которые покрываются текущей лучшей радиостанцией "best_station".
    # Мы это делаем путем вычитания из множества "states_needed" множества "states_covered".
    # ----------
    #
    states_needed -= states_covered
    # А также после работы каждого цикла for мы добавляем текущуюю лучшую радиостанцию "best_station"
    # в итоговый набор радиостанций "final_stations".
    # Для добавления нового элемента в множества мы используем метод "add".
    # ----------
    #
    final_stations.add(best_station)


#
# Функция "print()" выводит некую указанную информацию на экран или на какое-либо другое устройство вывода.
# ----------
#
# The function "print()" prints the specified message to the screen, or other standard output device.
print(final_stations)
