# Создаем функцию для обнаружения наибольшего элемента в списке.
def max(list):
    # Определяем случай, если передан пустой массив, чтобы избежать ошибки.
    if len(list) == 0:
        return None
    # Определяем базовый случай как если массив содержит всего один элемент, то этот элемент будет являться наибольшим.
    if len(list) == 1:
        return list[0]

    # Определяем рекурсивный случай.
    # Если первый элемент списка больше второго элемента этого списка, то удаляем второй элемент в списке
    # и рекурсивно вызываем функцию с новый урезанным списком.
    if list[0] > list[1]:
        del list[1]
        return max(list)
    # Иначе если первый элемент списка меньше или равен второму элементу этого списка,
    # то рекурсивно вызываем функцию со новым урезанным списком без первого элемента при помощи среза.
    else:
        return max(list[1:])


mylist1 = [2, 7, 45, 3, 5]
mylist2 = []
print(max(mylist1))
print(max(mylist2))


# Создаем еще один вариант функции для обнаружения наибольшего элемента в списке.
def max_(list):
    # Определяем случай, если передан пустой массив, чтобы избежать ошибки.
    if len(list) == 0:
        return None
    # Определяем базовый случай как если массив содержит всего один элемент, то этот элемент будет являться наибольшим.
    if len(list) == 1:
        return list[0]

    # Определяем рекурсивный случай.

    else:
        # Переменная sub_max содержит результат рекурсивно вызванной функции со списком без первого элемента.
        sub_max = max_(list[1:])
        # [5, 2, 1, 4] - [2, 1, 4]
        # [2, 1, 4] - [1, 4]
        # [1, 4] - [4]
        # [4]

        # Вовзращаем первый элемент текущего списка, если этот элемент больше значения,
        # полученного из следующей рекурсивно вызваннной функции.
        # Иначе возвращаем значение, полученное из следующей рекурсивно вызваннной функции.
        return list[0] if list[0] > sub_max else sub_max


mylist3 = [5, 2, 1, 4]
print(max_(mylist3))
