# Создаем граф.
graph = {}
graph["start"] = {}
graph["start"]["a"] = 6
graph["start"]["b"] = 2

graph["a"] = {}
graph["a"]["fin"] = 1

graph["b"] = {}
graph["b"]["a"] = 3
graph["b"]["fin"] = 5

graph["fin"] = {}

# Создаем переменную, которая хранит "бесконечность".
infinity = float("inf")

# Создаем таблицу стоимостей.
costs = {}
costs["a"] = 6
costs["b"] = 2
costs["fin"] = infinity

# Создаем таблицу родителей.
parents = {}
parents["a"] = "start"
parents["b"] = "start"
parents["fin"] = None

# Создаем список для отслеживания всех уже обработанных узлов, так как один узел не должен обрабатываться многократно.
processed = []


# Создаем функцию для поиска узла с наименьшей стоимостью.
def find_lowest_cost_node(costs):
    # Переменная lowest_cost нужна для хранения стоимости узла с наименьшей стоимостью.
    # Также она нужна далее в цикле для хранения стоимости предыдущего узла наименьшей стоимостью.
    lowest_cost = float("inf")

    # Переменная lowest_cost_node нужна для хранения имени узла с наименьшей стоимостью.
    lowest_cost_node = None

    # Перебираем каждый узел из таблицы стоимостей.
    for node in costs:
        # Переменная cost хранит стоимость текущего узла.
        cost = costs[node]

        # Если стоимость текущего узла меньше стоимости предыдущего узла наименьшей стоимостью,
        # или меньше бесконечности, если обрабатываем первый узел в цикле,
        # и текущий узел не находится в списке уже обработанных.
        if cost < lowest_cost and node not in processed:
            # Считаем, что стоимость текущего узла является наименьшей.
            lowest_cost = cost
            # Считаем, что этот узел является узлом с наименьшей стоимостью.
            lowest_cost_node = node
    # Функция возвращает имя узла с наименьшей стоимостью.
    return lowest_cost_node


# Находим первый узел с наименьшей стоимостью (должен быть узел b со стоимостью 2).
node = find_lowest_cost_node(costs)


# Высчитываем кратчайший путь от start до fin.
# Пока у нас есть узлы с наименьшей стоимостью для обработки.
while node is not None:
    # Переменная cost хранит стоимость текущего узла с наименьшей стоимостью.
    cost = costs[node]

    # Переменная neighbors хранит хеш-таблицу соседей и стоимостей до них текущего узла с наименьшей стоимостью.
    neighbors = graph[node]

    # Перебираем имена всех соседей текущего узла с наименьшей стоимостью.
    for n in neighbors.keys():
        # Высчитываем новую стоимость до соседа.
        new_cost = cost + neighbors[n]

        # Если текущая стоимость до текущего соседа больше новой стоимости до этого соседа.
        if costs[n] > new_cost:
            # Обновляем текущую стоимость до текущего соседа.
            costs[n] = new_cost
            # Обновляем родителя текущего соседа.
            parents[n] = node

    # Когда закончим перебор имен всех соседей текущего узла с наименьшей стоимостью,
    # тогда поместим этот узел в список уже обработанных.
    processed.append(node)
    # Находим следующий узел с наименьшей стоимостью.
    node = find_lowest_cost_node(costs)

# Выводим хеш-таблицу, содержащую уже наименьшие стоимости узлов графа.
print(costs)
