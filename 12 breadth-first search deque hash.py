# Поиск в ширину, используя хеш-таблицу (словарь) и очередь.
# Здесь нам нужно найти продавца манго среди друзей и друзей друзей персонажа.
# Здесь мы можем рассмотреть работу очереди.
# ----------
#
# Here we can see how the deque works.

# Ключевое слово "import" используется для импорта модулей.
# Ключевое слово "from" используется для импорта только указанного раздела из модуля.
# Очередь - это тип структуры данных, похожий на стек вызовов:
# мы не можем обращаться к произвольным элементам очереди.
# В очереди поддерживается 2 операции: постановка в очередь и извлечение из очереди.
# В Python используется двусторонняя очередь, поэтому мы можем добавлять или удалять элементы
# как с начала, так и с конца очереди.
# Для создания двусторонней очереди используется контейнер в виде списка
# с быстрыми добавлениями и удалениям на обоих концах очереди "deque" из модуля "collections":
# ----------
#
from collections import deque


# Создаем функцию "person_is_seller", которая принимает один входной параметр:
# переменная "name", содержащая имя персонажа, чтобы проверить, является ли этот персонаж продавцом манго.
# Если имя персонажа заканчивается на букву "r", то функция "person_is_seller" возвращает "True",
# иначе эта функция возвращает "False".
# Ключевое слово "return" выходит из функции и возвращает какое-либо значение.
# ----------
#
# The keyword "return" is to exit a function and return a value.
def person_is_seller(char_name):
    return char_name[-1] == 'r'


# Создаем словарь "char_graph", который будет представлять из себя граф персонажей и их ближайших друзей.
# С каждым ключем связано значение, которое предствляет из себя список.
# Этот список является списком ближайших друзей персонажа, имя которого представлено в ключе.
# ----------
#
char_graph = {"Shepard": ["Garrus", "Liara", "Wrex"],
              "Garrus": ["Grunt"],
              "Liara": ["Grunt", "Shadow Broker"],
              "Wrex": ["Mordin", "Tali"],
              "Shadow Broker": [],
              "Grunt": [],
              "Mordin": [],
              "Tali": []}


# Создаем функцию "search_seller", которая принимает один входной параметр:
# переменная "name", содержащая имя персонажа, чтобы проверить, является ли этот персонаж продавцом манго.
# ----------
#
def search_seller(char_name):
    # Создаем новую двустороннюю очередь "search_queue" при помощи метода "deque()".
    # ----------
    #
    search_queue = deque()
    # Добавляем всех ближайших друзей персонажа "name" в очередь "search_queue".
    # ----------
    #
    search_queue += char_graph[char_name]
    # Создаем список "searched", в который мы помещаем тех персонажей, которых уже проверили.
    # ----------
    #
    searched = []
    # Создаем цикл while, который работает пока очередь "search_queue" не является пустой.
    # ----------
    #
    while search_queue:
        # Из очереди извлекается первый человек.
        # Метод "popleft()" удаляет из очереди "search_queue" первый элемент и возвращает его переменной "person".
        # ----------
        #
        person = search_queue.popleft()
        # Если персонаж "person" не находится в списке уже проверенных персонажей "searched" и
        # ----------
        #
        if person not in searched:
            # если этот персонаж "person" яляется продавцом манго (имя этого персонажа заканчивается на букву "r"),
            # то выводится на экран сообщение о том, что этот персонаж "person" является продавцом манго.
            # Функция "print()" выводит некую указанную информацию на экран или на какое-либо другое устройство вывода.
            # ----------
            #
            # The function "print()" prints the specified message to the screen, or other standard output device.
            if person_is_seller(person):
                return print(person + " является продавцом манго!")
            # Иначе, если этот персонаж "person" не является продавцом манго,
            # то все ближайшие друзья этого персонажа "person" добавляются в конец очереди "search_queue".
            # ----------
            #
            else:
                search_queue += char_graph[person]
                # А также этот персонаж "person" добавляется в список проверенных персонажей "searched",
                # чтобы не проверять этого персонажа лишний раз.
                # ----------
                #
                searched.append(person)
    # Если очередь "search_queue" оказывается пустой, то это значит, что среди персонажей нет продавца манго.
    # Выводится на экран сообщение о том, что среди персонажей нет продавца манго.
    # ----------
    #
    return print("Среди персонажей нет продавца манго")


# Попытаемся найти продавца манго среди друзей и друзей друзей персонажа Shepard.
# ----------
# Try to find a mango seller among the friends and the friends of friends of the Shepard character.
search_seller("Shepard")
