# Для создания двусторонней очереди (дека) используется функция deque:
from collections import deque


# Создаем функцию для определения продавца манго. Если имя заканчивается на m, то это продавец манго.
def person_is_seller(name):
    return name[-1] == 'm'

# Создаем хеш-таблицу, которая будет содержать граф с друзьями и их соседями.
graph = {}

# Элемент you отображается на массив.
# Следовательно, результатом выражения graph["you"] является массив всех ваших соседей.
graph["you"] = ["alice", "bob", "claire"]

# Заполняем остальной граф.
graph["bob"] = ["anuj", "peggy"]
graph["alice"] = ["peggy"]
graph["claire"] = ["thom", "jonny"]
graph["anuj"] = []
graph["peggy"] = []
graph["thom"] = []
graph["jonny"] = []


# Создаем функцию для поиска продавца.
def search(name):
    # Создание новой двусторонней очереди для поиска.
    search_queue = deque()

    # Все соседи добавляются в эту очередь поиска.
    # Например, выражение graph ["you"] вернет список всех ваших соседей, например ("alice", "ЬоЬ", "claire"].
    # Все они добавляются в очередь поиска.
    search_queue += graph[name]

    # Массив searched будет содержать тех, кого уже проверили.
    searched = []

    # Начинаем искать продавца манго. Пока очередь не пуста.
    while search_queue:
        # Из очереди извлекается первый человек.
        person = search_queue.popleft()

        # Проверяем человека только если его нет в списке уже проверенных.
        if person not in searched:
            # Проверяем, является ли этот человек продавцом манго (имя заканчивается на "m").
            if person_is_seller(person):
                # Да, это продавец манго.
                print(person + " является продавцом манго!")
                return True
            else:
                # Иначе этот человек не является. Все друзья этого человека добавляются в очередь поиска.
                search_queue += graph[person]
                # Добавляем этого человека в список проверенных.
                searched.append(person)

    # Если выполнение дошло до этой строки, значит, в очереди нет продавца манго.
    return False


search("you")
